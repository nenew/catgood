<!DOCTYPE html>
<html>
  <head>
    <title>猫谷网</title>

    <!-- Viewport mobile tag for sensible mobile support -->
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
	  <link href="/css/metro.css" rel="stylesheet">
	  <link href="/css/metro-responsive.css" rel="stylesheet">

    <!--
        Stylesheets and Preprocessors
        ==============================

        You can always bring in CSS files manually with `<link>` tags, or asynchronously
        using a solution like AMD (RequireJS).  Or, if you like, you can take advantage
        of Sails' conventional asset pipeline (boilerplate Gruntfile).

        By default, stylesheets from your `assets/styles` folder are included
        here automatically (between STYLES and STYLES END). Both CSS (.css) and LESS (.less)
        are supported. In production, your styles will be minified and concatenated into
        a single file.

        To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Change the order of your CSS files
            + Import stylesheets from other directories
            + Use a different or additional preprocessor, like SASS, SCSS or Stylus
    -->

    <!--STYLES-->
    <link rel="stylesheet" href="/styles/importer.css">
    <!--STYLES END-->
  </head>

  <body style="background-color: orange;">
    <div style="text-align: center;">
  <header class="app-bar fixed-top navy"  data-role="appbar">
  <div class="container" >        <a style="color: inherit;    cursor: pointer;    display: block;       font-size: 3rem;    height: 3.125rem;    line-height: 1rem;    padding: 4rem 4rem 4rem 4rem;    position: relative;   vertical-align: middle;" href="http://www.catgood.com" >猫谷网</a>
        
    </div>
</header>
</div>
<div class="container page-content" style="padding-top:10rem;">
  <div style="text-align: center;"><img src="images/catimage.png" style="width: 35%;"></div>
  <h1 style="text-align: center;font: 30;color: white;">猫谷网建设中....</h1>
  <div style="text-align: center">
  <a href="http://weibo.com/u/5862039800" target="_blank"><button class="button loading-pulse lighten primary" style="margin-top:2rem">猫谷网微博</button></a>
  <a href="http://www.nenew.net" target="_blank"><button class="button loading-pulse lighten primary" style="margin-left: 2rem;margin-top:2rem">奶牛博客</button></a>
  </div>

        </div>
</div>


    <!--
        Client-side Templates
        ========================

        HTML templates are important prerequisites of modern, rich client applications.
        To work their magic, frameworks like Backbone, Angular, Ember, and Knockout require
        that you load these templates client-side.

        By default, your Gruntfile is configured to automatically load and precompile
        client-side JST templates in your `assets/templates` folder, then
        include them here automatically (between TEMPLATES and TEMPLATES END).

        To customize this behavior to fit your needs, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Import templates from other directories
            + Use a different template engine (handlebars, jade, dust, etc.)
            + Internationalize your client-side templates using a server-side
              stringfile before they're served.
    -->

    <!--TEMPLATES-->
    
    <!--TEMPLATES END-->


    <!--

      Client-side Javascript
      ========================

      You can always bring in JS files manually with `script` tags, or asynchronously
      on the client using a solution like AMD (RequireJS).  Or, if you like, you can
      take advantage of Sails' conventional asset pipeline (boilerplate Gruntfile).

      By default, files in your `assets/js` folder are included here
      automatically (between SCRIPTS and SCRIPTS END).  Both JavaScript (.js) and
      CoffeeScript (.coffee) are supported. In production, your scripts will be minified
      and concatenated into a single file.

      To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
      For example, here are a few things you could do:

          + Change the order of your scripts
          + Import scripts from other directories
          + Use a different preprocessor, like TypeScript

    -->

    <!--SCRIPTS-->
    <script src="/js/dependencies/sails.io.js"></script>
    <script src="/js/bootstrap.js"></script>
    <script src="/js/bootstrap.min.js"></script>
    <script src="/js/jquery.js"></script>
    <script src="/js/metro.js"></script>
    <script src="/js/metro.min.js"></script>
    <script src="/js/npm.js"></script>
    <!--SCRIPTS END-->
  </body>
</html>
